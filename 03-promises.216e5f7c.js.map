{"mappings":"AAWaA,SAASC,cAAc,QAE/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAEN,IAAMC,EAAaC,WAAWH,EAAMI,OAAOC,SAASC,MAAMC,OACpDC,EAAYL,WAAWH,EAAMI,OAAOC,SAASI,KAAKF,OAClDG,EAASC,SAASX,EAAMI,OAAOC,SAASK,OAAOH,OAEjDK,EAAkB,EAEhBC,EAAWC,aAAY,WAkB/B,IAAuBC,EAAUT,EAjBzBM,GAAmBF,EACrBM,cAAcH,KAgBGE,EAZLH,EAAkB,EAYHN,EAZMJ,EAAaU,EAAkBJ,EAa7D,IAAIS,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUT,UAEpBa,EAAO,CAAEJ,WAAUT,S,GAEpBA,E,KApBAiB,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUT,EAAKkB,EAALlB,MACjBmB,QAAQC,IAAI,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANrB,EAAM,M,IAE3DsB,OAAM,SAAAJ,G,IAAGT,EAAQS,EAART,SAAUT,EAAKkB,EAALlB,MAClBmB,QAAQI,MAAM,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANrB,EAAM,M,IAG7DM,I,GACCJ,E","sources":["src/js/03-promises.js"],"sourcesContent":["/*\n  1 input => opóżnienie pierwszego powiadomienia\n  2 input => dodawane opóżnienie do każdego następnego powiadomienia\n  3 input => ilość powiadomień\n\n  funkcja createPromise ma zwracać jedną obietnicę która wykonuje się przez delag czasu\n\n  opóźnienie jest generowane pseudolosowo w zmiennej shouldResolve która będzie booleanem\n\n*/\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const firstDelay = parseFloat(event.target.elements.delay.value);\n  const delayStep = parseFloat(event.target.elements.step.value);\n  const amount = parseInt(event.target.elements.amount.value);\n\n  let createdPromises = 0;\n\n  const interval = setInterval(() => {\n    if (createdPromises >= amount) {\n      clearInterval(interval);\n      return;\n    }\n\n    createPromise(createdPromises + 1, firstDelay + createdPromises * delayStep)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.error(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    createdPromises++;\n  }, delayStep);\n});\n//\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["document","querySelector","addEventListener","event","preventDefault","firstDelay","parseFloat","target","elements","delay","value","delayStep","step","amount","parseInt","createdPromises","interval","setInterval","position","clearInterval","Promise","resolve","reject","setTimeout","Math","random","then","param","console","log","concat","catch","error"],"version":3,"file":"03-promises.216e5f7c.js.map"}